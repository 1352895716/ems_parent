<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ems.mapper.SalaryMapper" >
  <resultMap id="BaseResultMap" type="com.ems.pojo.Salary" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="staff_id" property="staffId" jdbcType="INTEGER" />
    <result column="basic" property="basic" jdbcType="REAL" />
    <result column="eat" property="eat" jdbcType="REAL" />
    <result column="house" property="house" jdbcType="REAL" />
    <result column="duty" property="duty" jdbcType="REAL" />
    <result column="scot" property="scot" jdbcType="REAL" />
    <result column="additional_benefits" property="additionalBenefits" jdbcType="REAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="total" property="total" jdbcType="REAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, staff_id, basic, eat, house, duty, scot, additional_benefits, create_time, total
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ems.pojo.SalaryExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from salary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from salary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ems.pojo.SalaryExample" >
    delete from salary
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ems.pojo.Salary" >
    insert into salary (id, staff_id, basic, 
      eat, house, duty, scot, 
      additional_benefits, create_time, total
      )
    values (#{id,jdbcType=INTEGER}, #{staffId,jdbcType=INTEGER}, #{basic,jdbcType=REAL}, 
      #{eat,jdbcType=REAL}, #{house,jdbcType=REAL}, #{duty,jdbcType=REAL}, #{scot,jdbcType=REAL}, 
      #{additionalBenefits,jdbcType=REAL}, #{createTime,jdbcType=TIMESTAMP}, #{total,jdbcType=REAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ems.pojo.Salary" >
    insert into salary
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="staffId != null" >
        staff_id,
      </if>
      <if test="basic != null" >
        basic,
      </if>
      <if test="eat != null" >
        eat,
      </if>
      <if test="house != null" >
        house,
      </if>
      <if test="duty != null" >
        duty,
      </if>
      <if test="scot != null" >
        scot,
      </if>
      <if test="additionalBenefits != null" >
        additional_benefits,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="total != null" >
        total,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="staffId != null" >
        #{staffId,jdbcType=INTEGER},
      </if>
      <if test="basic != null" >
        #{basic,jdbcType=REAL},
      </if>
      <if test="eat != null" >
        #{eat,jdbcType=REAL},
      </if>
      <if test="house != null" >
        #{house,jdbcType=REAL},
      </if>
      <if test="duty != null" >
        #{duty,jdbcType=REAL},
      </if>
      <if test="scot != null" >
        #{scot,jdbcType=REAL},
      </if>
      <if test="additionalBenefits != null" >
        #{additionalBenefits,jdbcType=REAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="total != null" >
        #{total,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ems.pojo.SalaryExample" resultType="java.lang.Integer" >
    select count(*) from salary
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update salary
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.staffId != null" >
        staff_id = #{record.staffId,jdbcType=INTEGER},
      </if>
      <if test="record.basic != null" >
        basic = #{record.basic,jdbcType=REAL},
      </if>
      <if test="record.eat != null" >
        eat = #{record.eat,jdbcType=REAL},
      </if>
      <if test="record.house != null" >
        house = #{record.house,jdbcType=REAL},
      </if>
      <if test="record.duty != null" >
        duty = #{record.duty,jdbcType=REAL},
      </if>
      <if test="record.scot != null" >
        scot = #{record.scot,jdbcType=REAL},
      </if>
      <if test="record.additionalBenefits != null" >
        additional_benefits = #{record.additionalBenefits,jdbcType=REAL},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.total != null" >
        total = #{record.total,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update salary
    set id = #{record.id,jdbcType=INTEGER},
      staff_id = #{record.staffId,jdbcType=INTEGER},
      basic = #{record.basic,jdbcType=REAL},
      eat = #{record.eat,jdbcType=REAL},
      house = #{record.house,jdbcType=REAL},
      duty = #{record.duty,jdbcType=REAL},
      scot = #{record.scot,jdbcType=REAL},
      additional_benefits = #{record.additionalBenefits,jdbcType=REAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      total = #{record.total,jdbcType=REAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ems.pojo.Salary" >
    update salary
    <set >
      <if test="staffId != null" >
        staff_id = #{staffId,jdbcType=INTEGER},
      </if>
      <if test="basic != null" >
        basic = #{basic,jdbcType=REAL},
      </if>
      <if test="eat != null" >
        eat = #{eat,jdbcType=REAL},
      </if>
      <if test="house != null" >
        house = #{house,jdbcType=REAL},
      </if>
      <if test="duty != null" >
        duty = #{duty,jdbcType=REAL},
      </if>
      <if test="scot != null" >
        scot = #{scot,jdbcType=REAL},
      </if>
      <if test="additionalBenefits != null" >
        additional_benefits = #{additionalBenefits,jdbcType=REAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="total != null" >
        total = #{total,jdbcType=REAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ems.pojo.Salary" >
    update salary
    set staff_id = #{staffId,jdbcType=INTEGER},
      basic = #{basic,jdbcType=REAL},
      eat = #{eat,jdbcType=REAL},
      house = #{house,jdbcType=REAL},
      duty = #{duty,jdbcType=REAL},
      scot = #{scot,jdbcType=REAL},
      additional_benefits = #{additionalBenefits,jdbcType=REAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      total = #{total,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>